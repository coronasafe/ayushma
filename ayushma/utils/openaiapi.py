from typing import List

import openai
from django.conf import settings
from pinecone import QueryResponse


def get_embedding(
    text: List[str], model: str = "text-embedding-ada-002"
) -> List[List[float]]:
    """
    Generates embeddings for the given list of texts using the OpenAI API.

    Args:
        text (List[str]): A list of strings to be embedded.
        model (str, optional): The name of the OpenAI model to use for embedding.
            Defaults to "text-embedding-ada-002".

    Returns:
        A list of embeddings generated by the OpenAI API for the input texts.

    Raises:
        OpenAIError: If there was an error communicating with the OpenAI API.

    Example usage:
        >>> get_embedding(["Hello, world!", "How are you?"])
        [[-0.123, 0.456, 0.789, ...], [0.123, -0.456, 0.789, ...]]

    """
    openai.api_key = settings.OPENAI_API_KEY
    res = openai.Embedding.create(input=text, model=model)
    return [record["embedding"] for record in res["data"]]


def get_sanitized_reference(pinecone_references: List[QueryResponse]) -> str:
    """
    Extracts the text from the Pinecone QueryResponse object and sanitizes it.

    Args:
        pinecone_reference (List[QueryResponse]): The similar documents retrieved from
            the Pinecone index.

    Returns:
        A string containing the text from the Pinecone QueryResponse object.

    Example usage:
        >>> get_sanitized_reference([QueryResponse(...), QueryResponse(...)])
        "Hello, world! How are you?,I am fine. Thank you."
    """
    sanitized_reference = ""

    for reference in pinecone_references:
        for match in reference.matches:
            sanitized_reference += match.metadata["text"].replace("\n", " ") + ","

    return sanitized_reference
